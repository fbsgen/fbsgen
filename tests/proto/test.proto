package hello.world;

@int8
enum Size {
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 3;
  EXTRA_LARGE = 4;
}

@uint8(bit_flags = true)
enum SizeBF {
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 4;
  EXTRA_LARGE = 8;
}

message Foo {
  repeated bool rep_bool = 1;
  repeated int8 rep_byte = 2;
  repeated uint8 rep_ubyte = 3;
  repeated int16 rep_short = 4;
  repeated uint16 rep_ushort = 5;
  repeated int32 rep_int = 6;
  repeated uint32 rep_uint = 7;
  repeated int64 rep_long = 8;
  repeated uint64 rep_ulong = 9;
  repeated float rep_float = 10;
  repeated double rep_double = 11;
  repeated string rep_string = 12;
  repeated bytes rep_bytes = 13;
  repeated Size rep_size = 14;
  repeated Bar rep_bar = 15;
  repeated Hello.Feedback rep_hello_feedback = 16;
  repeated Hello.World rep_hello_world = 17;
}

message Bar {
  optional bool some_bool = 1;
  optional int8 some_byte = 2;
  optional uint8 some_ubyte = 3;
  optional int16 some_short = 4;
  optional uint16 some_ushort = 5;
  optional int32 some_int = 6;
  optional uint32 some_uint = 7;
  optional int64 some_long = 8;
  optional uint64 some_ulong = 9;
  optional float some_float = 10;
  optional double some_double = 11;
  optional string some_string = 12;
  optional bytes some_bytes = 13;
  optional Size some_size = 14;
  optional Baz some_baz = 15;
  optional Hello.Feedback some_hello_feedback = 16;
  optional Hello.World some_hello_world = 17;
}

@struct
message Baz {
  required uint64 id = 1;
}

@table(original_order = true)
message Hello {
  optional uint64 id = 1;
  optional string name = 2 [deprecated = true];
  
  /// a nested message
  @struct(force_align = 16)
  message World {
    optional uint64 id = 1;
    required uint32 kind = 2;
  }
  
  /// a nested enum
  @uint16
  enum Feedback {
    BAD = 1;
    NEEDS_IMPROVEMENT = 2;
    GOOD = 3;
    GREAT = 4;
  }
}
