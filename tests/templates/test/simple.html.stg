import "fbsgen/base"
import "fbsgen/dict"

proto_block(proto, module) ::= <<
«main_proto_block(proto, module, new_writable.(""))»
>>

main_proto_block(proto, module, writable) ::= <<
<!DOCTYPE html>
<html>
<head>
  <title>«if(module.o.("raw"))»raw«else»fbs«endif»: «proto.sourcePath»</title>
  <style>
    body {
      color: #555;
      background-color: #EEE;
      font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;
      font-size: 1.1em;
    }
    div.message h2 {
      margin-bottom: 0;
    }
    div.message h2 a {
      color: #CD5C5C;
    }
    div.message h2 span {
      font-size: 0.73em;
    }
    div.field {
      margin-left: 1em;
    }
    div.field > span {
      color: #4682B4;
    }
    div.field b a {
      color: #CD5C5C;
    }
    .comment {
      color: #999988;
    }
  </style>
</head>
<body>
  <div class="comment">
    // source: «proto.sourcePath»
  </div>
  <div><b>«if(module.o.("raw"))»package«else»namespace«endif»</b> «proto.declaredPackageName»;</div>
  «proto.messages:message_block(module, writable)»
</body>
>>

message_block(message, module, writable) ::= <<
<div class="message">
  <h2><span>«message_kind(message, module, writable)»</span> <a href="#«message.relativeName; format="\.==-"»" id="«message.relativeName; format="\.==-"»">«message.name»</a></h2>
  «if(module.o.("raw"))»
  «message.declaredFields:raw_field_decl(module, writable)»
  «else»
  «message.declaredFields:fbs_field_decl(module, writable)»
  «endif»
</div>
>>

message_kind(message, module, writable) ::= <%
«if(module.o.("raw"))»
message
«elseif(message.a.("Struct"))»
struct
«else»
table
«endif»
%>

fbs_field_decl(field, module, writable) ::= <<
<div class="field"><span>«field.name»</span>: «if(field.repeated)»[«endif»<b>«fbs_field_type(field, module, writable)»</b>«if(field.repeated)»]«endif» (id: «writable.n.(field.number).dec.num»);</div>
>>

fbs_field_type(field, module, writable) ::= <%
«if(field.userDefinedType)»
<a href="#«field.userDefinedType.relativeName; format="\.==-"»"><i>«field.fbsType»</i></a>
«else»
<span>«field.fbsType»</span>
«endif»
%>

raw_field_decl(field, module, writable) ::= <<
<div class="field"><i>«field.modifier; format="LOWER"»</i> <b>«raw_field_type(field, module, writable)»</b> <span>«field.name»</span> = «field.number»;</div>
>>

raw_field_type(field, module, writable) ::= <%
«if(field.userDefinedType)»
<a href="#«field.userDefinedType.relativeName; format="\.==-"»"><i>«field.javaType»</i></a>
«else»
<span>«field.class.simpleName; format="LOWER"»</span>
«endif»
%>
