package test_annotations;

/// DefaultPerson
@List(test: [
  1,
  true,
  "3",
  [ 4, false, { five: true } ],
  {
    four: [
      4, false, { five: true }
    ],
    five: {
      four: [
        4, false, { five: true }
      ]
    }
  }
])
@Map(test: {
  one: 1,
  two: true,
  three: "3",
  four: [
    4, false, { five: true }
  ],
  five: {
    four: [
      4, false, { five: true }
    ],
    five: {
      four: [
        4, false, { five: true }
      ]
    }
  }
})
@DefaultPerson(name="Anonymous Coward")
message Person {
    option list = [
      1,
      true,
      "3",
      [ 4, false, { five: true } ],
      {
        four: [
          4, false, { five: true }
        ],
        five: {
          four: [
            4, false, { five: true }
          ]
        }
      }
    ];
    option map = {
      one: 1,
      two: true,
      three: "3",
      four: [
        4, false, { five: true }
      ],
      five: {
        four: [
          4, false, { five: true }
        ],
        five: {
          four: [
            4, false, { five: true }
          ]
        }
      }
    };
    required uint32 id = 1;
    
    /// DefaultAge
    @DefaultAge
    optional uint32 age = 2;
    
    optional string name = 3;
    
    optional Gender gender = 4;
    
    /// DefaultGender
    @DefaultGender(value=MALE)
    enum Gender {
        @Alias(value="m", type=Person)
        MALE = 1;
        @Alias(value="f", type=Person)
        FEMALE = 2;
    }
    
    /// NestedMessageAnnotation
    @NestedMessageAnnotation
    message ListRequest {
        required uint32 limit = 1;
        
        /// DeeperMessageAnnotation
        @DeeperMessageAnnotation
        message Response {
            required uint32 count = 1;
            
            /// DeeperMessageFieldAnnotation
            @DeeperMessageFieldAnnotation(nullable=false,version=1.1)
            repeated Person person = 2;
            
            /// TestNested
            @TestNested(type=Person, g=Gender)
            optional string key = 3;
        }
    }
    
    //extensions 100 to max;
}

/*@PersonExtras
extend Person {
    @Validate optional string country = 100;
    
    @TestExtend(type=Person, g=Person.Gender)
    optional string key = 101;
}*/

/// SomeServiceAnnotation
@SomeServiceAnnotation
@AnotherServiceAnnotation
service PersonService {
    
    /// AuthRequired
    @AuthRequired(role=admin)
    rpc Put (Person) returns (Person);
    
    /// TestRpc
    @TestRpc(type=Person, g=Person.Gender)
    rpc List (Person.ListRequest) returns (Person.ListRequest.Response);
}
