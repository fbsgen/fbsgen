package test;

/// size
@Test
@int8
enum Size {
  XS = 0;
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 3;
  EXTRA_LARGE = 4;
}

@Test
@uint8(bit_flags = true)
enum Priority {
  NORMAL = 1;
  IMPORTANT = 2;
  URGENT = 4;
  CRITICAL = 8;
}

/*@struct
message R1 {
    required int32 f1 = 1;
    required int16 f2 = 2;
    required int8 f3 = 3;
    required int64 f4 = 4;
}

@struct
message R2 {
    required int32 f1 = 1;
    required int16 f2 = 2;
    required int64 f3 = 3;
}

@struct
message R3 {
    required int32 f1 = 1;
    required int8 f2 = 2;
    required int64 f3 = 3;
}

@struct
message R4 {
    required int32 f1 = 1;
    required int64 f2 = 2;
}

@struct
message R5 {
    required int16 f1 = 1;
    required int8 f2 = 2;
    required int64 f3 = 3;
}

@struct
message R6 {
    required int16 f1 = 1;
    required int64 f2 = 2;
}

@struct
message R7 {
    required int8 f1 = 1;
    required int64 f2 = 2;
}*/

@struct
message Ago {
    /// a comment
    required int16 f1 = 1;
    required int16 f2 = 2;
    required int16 f3 = 3;
    required int64 f4 = 4;
}

@struct
message Boo {
    required int32 x = 1;
    required int16 y = 2;
    required Ago z = 3;
}

message Foo {
  repeated bool rep_bool = 1;
  repeated int8 rep_byte = 2;
  repeated uint8 rep_ubyte = 3;
  repeated int16 rep_short = 4;
  repeated uint16 rep_ushort = 5;
  repeated int32 rep_int = 6;
  repeated uint32 rep_uint = 7;
  repeated int64 rep_long = 8;
  repeated uint64 rep_ulong = 9;
  repeated float rep_float = 10;
  repeated double rep_double = 11;
  repeated string rep_string = 12;
  repeated bytes rep_bytes = 13;
  repeated Bar rep_bar = 14;
  repeated Size rep_size = 15;
  repeated Hello rep_hello = 16;
  repeated Hello.Feedback rep_hello_feedback = 17;
  repeated Hello.World rep_hello_world = 18;
}

message Bar {
  optional bool some_bool = 1;
  optional int8 some_byte = 2;
  optional uint8 some_ubyte = 3;
  optional int16 some_short = 4;
  optional uint16 some_ushort = 5;
  optional int32 some_int = 6;
  optional uint32 some_uint = 7;
  optional int64 some_long = 8;
  optional uint64 some_ulong = 9;
  optional float some_float = 10;
  optional double some_double = 11;
  optional string some_string = 12;
  optional bytes some_bytes = 13;
  optional Baz some_baz = 14;
  optional Size some_size = 15;
  optional Hello some_hello = 16;
  optional Hello.Feedback some_hello_feedback = 17;
  optional Hello.World some_hello_world = 18;
}

message FooBar {
  repeated bool rep_bool = 1;
  repeated int8 rep_byte = 2;
  repeated uint8 rep_ubyte = 3;
  repeated int16 rep_short = 4;
  repeated uint16 rep_ushort = 5;
  repeated int32 rep_int = 6;
  repeated uint32 rep_uint = 7;
  repeated int64 rep_long = 8;
  repeated uint64 rep_ulong = 9;
  repeated float rep_float = 10;
  repeated double rep_double = 11;
  repeated string rep_string = 12;
  repeated bytes rep_bytes = 13;
  repeated Bar rep_bar = 14;
  repeated Size rep_size = 15;
  repeated Hello rep_hello = 16;
  repeated Hello.Feedback rep_hello_feedback = 17;
  repeated Hello.World rep_hello_world = 18;
  repeated Baz rep_baz = 19;
  repeated Foo rep_foo = 20;
  
  optional bool some_bool = 21;
  optional int8 some_byte = 22;
  optional uint8 some_ubyte = 23;
  optional int16 some_short = 24;
  optional uint16 some_ushort = 25;
  optional int32 some_int = 26;
  optional uint32 some_uint = 27;
  optional int64 some_long = 28;
  optional uint64 some_ulong = 29;
  optional float some_float = 30;
  optional double some_double = 31;
  optional string some_string = 32;
  optional bytes some_bytes = 33;
  optional Baz some_baz = 34;
  optional Size some_size = 35;
  optional Hello some_hello = 36;
  optional Hello.Feedback some_hello_feedback = 37;
  optional Hello.World some_hello_world = 38;
  optional Bar some_bar = 39;
  optional Foo some_foo = 40;
}

@struct
message Baz {
  required bool some_bool = 1;
  required int8 some_byte = 2;
  required uint8 some_ubyte = 3;
  required int16 some_short = 4;
  required uint16 some_ushort = 5;
  required int32 some_int = 6;
  required uint32 some_uint = 7;
  required int64 some_long = 8;
  required uint64 some_ulong = 9;
  required float some_float = 10;
  required double some_double = 11;
  required Size some_size = 12;
  required Hello.Feedback some_hello_feedback = 13;
  required Boo boo = 14;
}

@struct
message AlignedBaz {
  required int64 some_long = 1;
  required uint64 some_ulong = 2;
  required double some_double = 3;
  
  required int32 some_int = 4;
  required uint32 some_uint = 5;
  required float some_float = 6;

  required int16 some_short = 7;
  required uint16 some_ushort = 8;
  required Hello.Feedback some_hello_feedback = 9;
  
  required bool some_bool = 10;
  required int8 some_byte = 11;
  required uint8 some_ubyte = 12;
  required Size some_size = 13;
}

@struct
message UnalignedBaz {
  required int64 some_long = 1;
  required bool some_bool = 2;
  
  required uint64 some_ulong = 3;
  required int8 some_byte = 4;
  
  required double some_double = 5;
  
  required int32 some_int = 6;
  required uint8 some_ubyte = 7;
  
  required uint32 some_uint = 8;
  required Size some_size = 9;
  
  required float some_float = 10;
  required int16 some_short = 11;
  required uint16 some_ushort = 12;
  required Hello.Feedback some_hello_feedback = 13;
}

@table(original_order = true)
message Hello {
  optional uint64 id = 1;
  optional string name = 2 [deprecated = true];
  
  /// a nested message
  @struct(force_align = 16)
  message World {
    optional uint64 id = 1;
    required uint32 kind = 2;
  }
  
  /// a nested enum
  @uint16
  enum Feedback {
    NONE = 0;
    BAD = 1;
    NEEDS_IMPROVEMENT = 2;
    GOOD = 3;
    GREAT = 4;
  }
}
